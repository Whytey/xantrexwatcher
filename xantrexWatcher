#!/usr/bin/env python
# Monitor the status of the solar inverter and
# send it to zabbix.
#
# Now uploads to PVOutput.org too.
#
# There is very little error checking in this script!

from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
from datetime import timedelta, datetime
import logging
import logging.handlers
import os
import serial
import subprocess
import threading
import time
import urllib
import urllib2


class HTTPHandlerFactory():
    def __init__(self):
        self.__logger = logging.getLogger("xantrexWatcher.HTTPHandlerFactory")
        self.__logger.info("Initialised...")
        self.__xantrexData = {}
        self.__machineStateData = {}
        
    def handleXantrexData(self, data):
        self.__logger.debug("Got new Xantrex data: %s" % str(data))
        self.__xantrexData = data
        
    def handleMachineState(self, data):
        self.__logger.debug("Got new machine state: %s" % str(data))
        self.__machineStateData = data
        
    def __call__(self, request, client_address, server):
        "Act as a factory for the server objects."
        self.__logger.debug("Creating a handler")
        handler = HTTPHandler(request, client_address, server, self.__xantrexData, self.__machineStateData)
        return handler


class HTTPHandler(BaseHTTPRequestHandler):
    def __init__(self, request, client_address, server, xantrexData, machineStateData):
        self.__logger = logging.getLogger("xantrexWatcher.HTTPHandler")
        self.__logger.debug("Initialised with data: %s & %s" % (str(xantrexData), str(machineStateData)))
        self.__xantrexData = xantrexData
        self.__machineStateData = machineStateData
        BaseHTTPRequestHandler.__init__(self, request, client_address, server)
        
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        threadName = threading.currentThread().getName()
        message =  "%s\nXantrex Data: %s\nMachine Data: %s\n" % (threadName, self.__xantrexData, self.__machineStateData)
        self.wfile.write(message)
        self.wfile.write('\n')
        return
    
    def log_message(self, format, *args):
        self.__logger.info("Got a request: %s" % str(args))
        return

    
class ThreadedHTTPServer(threading.Thread):
    # Which address we should bind to. Empty string ("") binds to all interfaces
    __web_server_address = ''
    
    # Which port the server should bind to.
    __web_server_port = 8080
    
    def __init__(self, handler):
        threading.Thread.__init__(self)
        self.__logger = logging.getLogger("xantrexWatcher.ThreadedHTTPServer")
        self.__logger.info("Initialised...")
        self.__handler = handler
        self.__server = HTTPServer((self.__web_server_address, self.__web_server_port), self.__handler)

    
    def run(self):
        self.__logger.info("Starting server")
        self.__server.serve_forever()


class PVOutputSender():
    # Your *private* key for uploading the PVOUtput.org
    __api_key = ""
    
    # The id of the system you are uploading for.
    __system_id = ""
    
    # The number of minutes between calling the AddStatus service.
    __status_interval = 10
    
    # The end of day URL
    __end_of_day_url = "http://pvoutput.org/service/r2/addoutput.jsp"

    # The live data URL
    __live_status_url = "http://pvoutput.org/service/r2/addstatus.jsp"
    
    def __init__(self):
        self.__logger = logging.getLogger("xantrexWatcher.PVOutputSender")
        self.__logger.info("Initialised...")
        self.__uploaded_end_of_day = False
        self.__last_status = None
        
    def __upload(self, url, data):
        self.__logger.debug("Data to upload: %s" % data)

        post_data=urllib.urlencode(data)
        req=urllib2.Request(url, post_data)
        
        req.add_header("Content-type", "application/x-www-form-urlencoded")
        req.add_header("X-Pvoutput-Apikey", self.__api_key)
        req.add_header("X-Pvoutput-SystemId", self.__system_id)

        response = urllib2.urlopen(req)

        if response:
            self.__logger.debug("Response code of %s with the following info: %s" % (response.getcode(), response.info()))   
              
    def __add_output(self, time, daysEnergyKWH):

        days_data=[('d', time.strftime("%Y%m%d")),
                   ('g', daysEnergyKWH * 1000)]
        
        # Upload the data
        self.__upload(self.__end_of_day_url, days_data)

        # End of day has now been uploaded
        self.__uploaded_end_of_day = True

    def __add_status(self, time, powerOutW, daysEnergyKWH):
        
        live_data = [('d', time.strftime("%Y%m%d")),
                     ('t', time.strftime("%H:%M")),
                     ('v1', daysEnergyKWH * 1000),
                     ('v2', powerOutW)]

        # Upload the data
        self.__upload(self.__live_status_url, live_data)

        # If we are uploading status, we can't have really uploaded end of day 
        # data just yet
        self.__uploaded_end_of_day = False
        
        # Record the last time we uploaded status
        self.__last_status = time
        
    
    def handleXantrexData(self, data):
        assert type(data) == dict, "data should be a dictionary: %s" % data
        assert "inverterData" in data, "Message does not provide inverterData" % data

        # Get the inverter data
        inverterData = data["inverterData"]
        assert type(inverterData) == dict, "inverterData should be a dictionary: %s" % inverterData

        # Get the time of this update
        assert "time" in data, "Message does not specify update time" % data
        updateTime = datetime.fromtimestamp(float(data["time"]))
        

        assert "power.out" in inverterData, "power.out is not specified in the inverterData: %s" % inverterData
        assert "power.in" in inverterData, "power.in is not specified in the inverterData: %s" % inverterData
        assert "power.today" in inverterData, "power.today is not specified in the inverterData: %s" % inverterData
        powerOut = inverterData["power.out"]
        powerIn = inverterData["power.in"]
        powerToday = inverterData["power.today"]
        
        self.__logger.debug("Power In: %s, Power Out: %s, Power Today: %s" % (powerIn, powerOut, powerToday))
        
        # At most, upload the PVOutput at Status Interval minutes.  This also means
        # we wait at least 10 minutes after the last status before uploading end of day,
        # which eliminates any start of day/end of day flutter due to low power out.
        if not self.__last_status or (self.__last_status 
                                      and (updateTime - datetime.fromtimestamp(self.__last_status)).seconds > self.__status_interval * 60):
        
            if powerOut > 0: 
                # Inverter is online.  If we have never provided status or we 
                # have waited the interval since providing status 
                self.__logger.info("Uploading status: %s" % powerOut)
                self.__add_status(updateTime, powerOut)

            if powerOut == 0 and powerIn == 0 and not self.__uploaded_end_of_day:
                # Inverter is offline but we haven't uploaded for end of day yet
                self.__logger.info("Uploading end of day stats: %s" % powerToday)
                self.__add_output(updateTime, powerToday)
                

class ZabbixSender():
    # The host running the zabbix-server.
    zabbix_server = '192.168.0.100'
    
    # The name of the Zabbix host being monitored.
    zabbix_host = 'inverter1'

    def __init__(self):
        self.__logger = logging.getLogger("xantrexWatcher.ZabbixSender")
        self.__logger.info("Initialised...")

    def handleXantrexData(self, data):
        assert type(data) == dict, "data should be a dictionary: %s" % data
        assert "inverterData" in data, "Message does not provide inverterData" % data
        assert type(data["inverterData"]) == dict, "inverterData should be a dictionary: %s" % data
        for key, value in data["inverterData"].items():
            # Report status back.
            self.__logger.debug("Calling zabbix_sender with value of %s for key %s" % (str(value), key))
            subprocess.call(['zabbix_sender', '-z', self.zabbix_server, '-s', self.zabbix_host, '-k', key, '-o', str(value)])


class MachineStatePoller(threading.Thread):
    # How often the poller runs, in seconds
    __poll_interval = 30
    
    def __init__(self):
        threading.Thread.__init__(self)
        self.__logger = logging.getLogger("xantrexWatcher.MachineStatePoller")
        self.__logger.info("Initialised...")
        self.__listeners = []

    def add_listener(self, listener):
        self.__listeners.append(listener)
        
    def __get_time(self, data):
        data["time"] = str(time.time())
        
    def __get_uptime(self, data):
        with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.readline().split()[0])
            uptime_string = str(timedelta(seconds = uptime_seconds))
            data["uptime"] = uptime_string
        
    def __get_load_averages(self, data):
        load1, load5, load15 = os.getloadavg()
        data["load1"] = load1
        data["load5"] = load5
        data["load15"] = load15
        
    def __get_disk_space(self, data):
        pass
    
    def __get_cpu_use(self, data):
        pass
    
    def run(self):
        self.__logger.info("Starting poller")
        while True:
            self.__logger.info("Polling...")
            data = {}
            
            # Get the data
            self.__get_time(data)
            self.__get_uptime(data)
            self.__get_load_averages(data)
            self.__get_disk_space(data)
            self.__get_cpu_use(data)
            # Report the values to our listeners
            for listener in self.__listeners:
                try:
                    listener.handleMachineState(data)
                except:
                    self.__logger.exception("Unable to send data %s to the listener %s" % (data, listener))
            self.__logger.debug("Sleeping...")
            time.sleep(self.__poll_interval)
    
            
class XantrexReader():
    # Commands we use.  They are sent across the serial line, in the format "<command>?\r".
    commands = {'TIME':'power.time', 'KWHTODAY':'power.today', 'POUT':'power.out', 'PIN':'power.in', 'KWHLIFE':'power.life'}
    # Other commands we know of:
    # MEASTEMP: The temperature of the inverter, in the format C:0.0 F:32.0
    # IDN
    # ROM
    # VIN
    # IIN
    # VOUT
    # IOUT
    # RECTIME

    # how often to poll the Inverter and report the status in seconds.
    poll_interval = 5
    
    # The serial connection we are using.
    serial_port = '/dev/ttyS0'
    
    # The serial baud rate.
    serial_baud = 9600

    def __init__(self):
        self.__logger = logging.getLogger("xantrexWatcher.XantrexReader")
        self.__logger.info("Initialised...")
        self.__listeners = []
    
    def add_listener(self, listener):
        self.__listeners.append(listener)

    def read(self):
        while True:
            conn = None
            data = {}
            data["time"] = str(time.time())
            
            try:
                # Open the serial port
                self.__logger.info("Opening the serial connection on port %s" % self.serial_port)
                conn = serial.Serial(self.serial_port, self.serial_baud, timeout=1)
                inverterData = {}

                # Iterate through each of the commands
                for command, key in self.commands.items():
                    self.__logger.debug("Writing command %s" % command)
                    conn.write("%s?\r" % command)
                    self.__logger.debug("Finished writing, now reading")
                    value = float(conn.read(255))
                    self.__logger.debug('%s: %s' % (key, str(value)))
                    
                    # Record the retrieved data
                    inverterData[key] = value
                    
                data["inverterData"] = inverterData
            except Exception, e:
                self.__logger.exception(e)
            
            finally:
                # Close the serial connection until next time.
                self.__logger.info("Closing the serial connection")
                if conn:
                    conn.close()
                
            if len(data) > 0:
                # Report the values to our listeners
                for listener in self.__listeners:
                    try:
                        listener.handleXantrexData(data)
                    except:
                        self.__logger.exception("Unable to send data %s to the listener %s" % (data, listener))
              
            # Sleep until next time.
            self.__logger.info("Sleeping")
            time.sleep(self.poll_interval)
            self.__logger.debug("Woke from sleep")


def __setup_logger():
    # Setup the logger
    logger = logging.getLogger('xantrexWatcher')
    logger.setLevel(logging.DEBUG)
    
    logfile = "xantrexWatcher.log"
    # Determine the logger location
    if not os.path.exists(os.path.join(os.getcwd(), 'setup.py')):
        # We are in production.
        logfile = os.path.join("var", "log", logfile)
    
    # Add the log message handler to the logger
    file_handler = logging.handlers.RotatingFileHandler(
                   logfile, maxBytes=10485760, backupCount=7)
    file_handler.setLevel(logging.DEBUG)
    
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.DEBUG)
    
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger


if __name__ == '__main__':
    logger = __setup_logger()
    
    # Create a web server and kick it off.
    httpHandler = HTTPHandlerFactory()
    webserver = ThreadedHTTPServer(httpHandler)
    webserver.start()
    
    # Create a machine state poller and kick it off.  The httpHandler is 
    # interested in machine state data.
    machinePoller = MachineStatePoller()
    machinePoller.add_listener(httpHandler)
    machinePoller.start()
    
    # Create the other listeners.
    zabbixSender = ZabbixSender()
    pvOutputSender = PVOutputSender()
    
    # Create the reader of the inverter data.  Register the objects that are
    # interested in the inverter data.  
    reader = XantrexReader()
    reader.add_listener(zabbixSender)
    reader.add_listener(pvOutputSender)
    reader.add_listener(httpHandler)
    reader.read()